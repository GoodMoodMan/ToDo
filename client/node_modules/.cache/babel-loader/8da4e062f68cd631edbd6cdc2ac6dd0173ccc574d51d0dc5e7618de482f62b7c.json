{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noam\\\\task-management\\\\src\\\\components\\\\BodyAdmin.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App_comp.css';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BodyAdmin(props) {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  // useEffect to fetch users list on initial render\n  useEffect(() => {\n    fetch(`http://${props.server_ip}:3001/users/admin`).then(response => response.json()).then(data => {\n      setUsers(data);\n    }).catch(error => {\n      console.error('Error fetching users:', error);\n    });\n  }, []);\n  const handleUserSelect = user => {\n    setSelectedUser(user);\n    setIsDropdownOpen(false);\n  };\n  const toggleDropdown = () => {\n    setIsDropdownOpen(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary dropdown-toggle\",\n        type: \"button\",\n        id: \"userDropdown\",\n        \"data-bs-toggle\": \"dropdown\",\n        \"aria-expanded\": \"false\",\n        children: \"Select User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dropdown-menu\",\n        \"aria-labelledby\": \"userDropdown\",\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleUserSelect(user),\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"dropdown-item\",\n            href: \"#\",\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Selected User: \", selectedUser.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(BodyAdmin, \"mi1id1MRYfLmKfFrlI8hr0Eyy3Y=\");\n_c = BodyAdmin;\nexport default BodyAdmin;\nvar _c;\n$RefreshReg$(_c, \"BodyAdmin\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","jsxDEV","_jsxDEV","BodyAdmin","props","_s","users","setUsers","selectedUser","setSelectedUser","isDropdownOpen","setIsDropdownOpen","fetch","server_ip","then","response","json","data","catch","error","console","handleUserSelect","user","toggleDropdown","prevState","children","className","type","id","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","href","username","_c","$RefreshReg$"],"sources":["C:/Users/Noam/task-management/src/components/BodyAdmin.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App_comp.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction BodyAdmin(props) {\r\n  const [users, setUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\r\n  // useEffect to fetch users list on initial render\r\n  useEffect(() => {\r\n    fetch(`http://${props.server_ip}:3001/users/admin`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setUsers(data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching users:', error);\r\n      });\r\n  }, []);\r\n\r\n  const handleUserSelect = (user) => {\r\n    setSelectedUser(user);\r\n    setIsDropdownOpen(false);\r\n  };\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(prevState => !prevState);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"dropdown\">\r\n        <button\r\n          className=\"btn btn-primary dropdown-toggle\"\r\n          type=\"button\"\r\n          id=\"userDropdown\"\r\n          data-bs-toggle=\"dropdown\"\r\n          aria-expanded=\"false\"\r\n        >\r\n          Select User\r\n        </button>\r\n        <ul className=\"dropdown-menu\" aria-labelledby=\"userDropdown\">\r\n          {users.map(user => (\r\n            <li key={user.id} onClick={() => handleUserSelect(user)}>\r\n              <a className=\"dropdown-item\" href=\"#\">\r\n                {user.username}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        {selectedUser && (\r\n          <div>\r\n            <h3>Selected User: {selectedUser.username}</h3>\r\n            {/* Display user details or allow editing here */}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BodyAdmin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}