{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noam\\\\task-management\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport HeaderTask from './components/HeaderTask';\nimport BodyTask from './components/BodyTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst server_ip = '192.168.1.13';\nfetch(`http://${server_ip}:3001`).then(response => response.text()).then(data => {\n  // Handle the response data\n  console.log(data);\n}).catch(error => {\n  // Handle the error\n  console.error(error);\n});\nfunction App() {\n  _s();\n  const [true_username, setUsername] = useState(\"\");\n  const [loggedin, setLoggedin] = useState(false);\n  const [curr_tab, setCurr_tab] = useState(1);\n  const [tasks, setTasks] = useState([{\n    id: 'task-1',\n    content: 'Task 1',\n    date: new Date()\n  }, {\n    id: 'task-2',\n    content: 'Task 2',\n    date: new Date()\n  }, {\n    id: 'task-3',\n    content: 'Task 3',\n    date: new Date()\n  }]);\n  const [message, setMessage] = useState('');\n  const [alert_type, setAlertType] = useState(-1);\n  const [guest, setGuest] = useState(false);\n  useEffect(() => {\n    // if user is a guest dont post to server\n    if (guest) return;\n    // this useEffect hook gets called on any change to tasks,\n    // putting the new task list to server using saved username\n    console.log(\"update\");\n    fetch(`http://${server_ip}:3001/users/${true_username}/tasks`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        tasks\n      })\n    }).then(response => {\n      if (response.ok) {\n        console.log('Task list updated successfully');\n      } else {\n        console.error('Failed to update task list:', response.statusText);\n      }\n    }).catch(error => {\n      console.error('Error occurred:', error);\n    });\n    console.log(\"finish update\");\n  }, [tasks]);\n\n  // every change to current tab, reset alert\n  useEffect(() => {\n    setAlertType(-1);\n  }, [curr_tab]);\n  const HandleLogin = (username, password) => {\n    console.log(\"connect\");\n    fetch(`http://${server_ip}:3001/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(response => {\n      // Handle the response from the server\n      if (response.status === 200) {\n        // Login successful\n        setMessage('Login Successful');\n        setAlertType(1);\n        return response.json(); // Parse the response body as JSON\n      } else if (response.status === 401) {\n        // Invalid password\n        setMessage('Wrong Password');\n        setAlertType(0);\n        throw new Error('Wrong password');\n      } else if (response.status === 404) {\n        // User not found\n        setMessage('User not found');\n        setAlertType(0);\n        throw new Error('User not found');\n      } else {\n        // Other errors\n        console.error('Error occurred:', response.statusText);\n        throw new Error('Error occurred');\n      }\n    }).then(data => {\n      // Access the parsed data\n\n      setUsername(username);\n      setLoggedin(true);\n      setTasks(data.tasks);\n      console.log(data);\n    }).catch(error => {\n      console.error('Error occurred:', error);\n    });\n  };\n\n  // SERVER SIGNUP\n  const HandleSignup = (username, password, confirmPassword) => {\n    if (username.trim() === '') {\n      setMessage('Username cannot be empty!');\n      setAlertType(0);\n      return;\n    }\n    if (password.trim() === '') {\n      setMessage('Password cannot be empty!');\n      setAlertType(0);\n      return;\n    }\n    if (password !== confirmPassword) {\n      setMessage('Passwords do not match!');\n      setAlertType(0);\n      return;\n    }\n    fetch(`http://${server_ip}:3001/users/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(response => {\n      // Handle the response from the server\n      if (response.status === 200) {\n        // Signup successful\n        setMessage('Signup Successful');\n        setAlertType(1);\n        return response.json(); // Parse the response body as JSON\n      } else if (response.status === 401) {\n        // Username Taken\n        setMessage('Username Already Taken');\n        setAlertType(0);\n        throw new Error('Username Taken');\n      } else {\n        // Other errors\n\n        console.error('Error occurred:', response.statusText);\n        throw new Error('Error occurred');\n      }\n    }).catch(error => {\n      console.error('Error occurred:', error);\n    });\n  };\n  const HandleLogoff = () => {\n    setAlertType(-1);\n    setLoggedin(false);\n    setGuest(false);\n  };\n  const HandleGuest = () => {\n    setLoggedin(true);\n    setGuest(true);\n  };\n  if (!loggedin) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        curr_tab: curr_tab,\n        setCurr_tab: setCurr_tab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Body, {\n        HandleSignup: HandleSignup,\n        curr_tab: curr_tab,\n        setCurr_tab: setCurr_tab,\n        HandleLogin: HandleLogin,\n        message: message,\n        alert_type: alert_type,\n        HandleGuest: HandleGuest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(HeaderTask, {\n        HandleLogoff: HandleLogoff\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BodyTask, {\n        taskList: tasks,\n        setTasks: setTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(App, \"E7p4O4qNe3wMY0YgGR5L3rhFD9M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Header","Body","HeaderTask","BodyTask","jsxDEV","_jsxDEV","server_ip","fetch","then","response","text","data","console","log","catch","error","App","_s","true_username","setUsername","loggedin","setLoggedin","curr_tab","setCurr_tab","tasks","setTasks","id","content","date","Date","message","setMessage","alert_type","setAlertType","guest","setGuest","method","headers","body","JSON","stringify","ok","statusText","HandleLogin","username","password","status","json","Error","HandleSignup","confirmPassword","trim","HandleLogoff","HandleGuest","className","children","fileName","_jsxFileName","lineNumber","columnNumber","taskList","_c","$RefreshReg$"],"sources":["C:/Users/Noam/task-management/src/App.js"],"sourcesContent":["\r\nimport { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Body from './components/Body';\r\nimport HeaderTask from './components/HeaderTask';\r\nimport BodyTask from './components/BodyTask';\r\n\r\nconst server_ip = '192.168.1.13';\r\n\r\nfetch(`http://${server_ip}:3001`)\r\n  .then(response => response.text())\r\n  .then(data => {\r\n    // Handle the response data\r\n    console.log(data);\r\n  })\r\n  .catch(error => {\r\n    // Handle the error\r\n    console.error(error);\r\n  });\r\n\r\n\r\nfunction App() {\r\n\r\n  const [true_username, setUsername] = useState(\"\");\r\n  const [loggedin, setLoggedin] = useState(false);\r\n  const [curr_tab, setCurr_tab] = useState(1);\r\n  const [tasks, setTasks] = useState([\r\n    { id: 'task-1', content: 'Task 1' , date: new Date()},\r\n    { id: 'task-2', content: 'Task 2' , date: new Date()},\r\n    { id: 'task-3', content: 'Task 3' , date: new Date()},\r\n  ]);\r\n\r\n  const [message, setMessage] = useState('');\r\n  const [alert_type, setAlertType] = useState(-1);\r\n\r\n  const [guest, setGuest] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    // if user is a guest dont post to server\r\n    if (guest) return;\r\n    // this useEffect hook gets called on any change to tasks,\r\n    // putting the new task list to server using saved username\r\n    console.log(\"update\");\r\n    fetch(`http://${server_ip}:3001/users/${true_username}/tasks`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ tasks }),\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          console.log('Task list updated successfully');\r\n\r\n        } else {\r\n          console.error('Failed to update task list:', response.statusText);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error occurred:', error);\r\n      });\r\n    console.log(\"finish update\");\r\n\r\n\r\n  }, [tasks])\r\n\r\n  // every change to current tab, reset alert\r\n  useEffect(() => {\r\n    setAlertType(-1);\r\n\r\n  }, [curr_tab])\r\n\r\n  const HandleLogin = (username, password) => {\r\n    console.log(\"connect\");\r\n    fetch(`http://${server_ip}:3001/users/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password })\r\n    })\r\n      .then(response => {\r\n\r\n        // Handle the response from the server\r\n        if (response.status === 200) {\r\n          // Login successful\r\n          setMessage('Login Successful');\r\n          setAlertType(1);\r\n          return response.json(); // Parse the response body as JSON\r\n        } else if (response.status === 401) {\r\n          // Invalid password\r\n          setMessage('Wrong Password');\r\n          setAlertType(0);\r\n          throw new Error('Wrong password');\r\n        } else if (response.status === 404) {\r\n          // User not found\r\n          setMessage('User not found');\r\n          setAlertType(0);\r\n          throw new Error('User not found');\r\n        } else {\r\n          // Other errors\r\n          console.error('Error occurred:', response.statusText);\r\n          throw new Error('Error occurred');\r\n        }\r\n      })\r\n      .then(data => {\r\n        // Access the parsed data\r\n\r\n        setUsername(username);\r\n        setLoggedin(true);\r\n        setTasks(data.tasks);\r\n        console.log(data);\r\n\r\n      })\r\n      .catch(error => {\r\n        console.error('Error occurred:', error);\r\n      });\r\n  };\r\n\r\n  // SERVER SIGNUP\r\n  const HandleSignup = (username, password,confirmPassword) => {\r\n    if (username.trim() === '') {\r\n      setMessage('Username cannot be empty!');\r\n      setAlertType(0);\r\n      return;\r\n    }\r\n\r\n    if (password.trim() === '') {\r\n      setMessage('Password cannot be empty!');\r\n      setAlertType(0);\r\n      return;\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      setMessage('Passwords do not match!');\r\n      setAlertType(0);\r\n      return;\r\n    }\r\n\r\n\r\n    fetch(`http://${server_ip}:3001/users/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ username, password })\r\n    })\r\n      .then(response => {\r\n        // Handle the response from the server\r\n        if (response.status === 200) {\r\n          // Signup successful\r\n          setMessage('Signup Successful');\r\n          setAlertType(1);\r\n\r\n          return response.json(); // Parse the response body as JSON\r\n        } else if (response.status === 401) {\r\n          // Username Taken\r\n          setMessage('Username Already Taken');\r\n          setAlertType(0);\r\n          throw new Error('Username Taken');\r\n        } else {\r\n          // Other errors\r\n\r\n          console.error('Error occurred:', response.statusText);\r\n          throw new Error('Error occurred');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error occurred:', error);\r\n      });\r\n  }\r\n\r\n  const HandleLogoff = () => {\r\n    setAlertType(-1);\r\n    setLoggedin(false);\r\n    setGuest(false);\r\n  }\r\n\r\n\r\n  const HandleGuest = () => {\r\n    setLoggedin(true);\r\n    setGuest(true);\r\n  }\r\n\r\n  if (!loggedin) {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header curr_tab={curr_tab} setCurr_tab={setCurr_tab}></Header>\r\n        <Body HandleSignup={HandleSignup} curr_tab={curr_tab} setCurr_tab={setCurr_tab} HandleLogin={HandleLogin}\r\n          message={message} alert_type={alert_type} HandleGuest = {HandleGuest}></Body>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  else {\r\n    return (\r\n      <div className=\"App\">\r\n        <HeaderTask HandleLogoff={HandleLogoff}></HeaderTask>\r\n        <BodyTask taskList={tasks} setTasks={setTasks}></BodyTask>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}