{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noam\\\\task-management\\\\src\\\\components\\\\BodyAdmin.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App_comp.css';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BodyAdmin(props) {\n  _s();\n  const [users, setUsers] = useState([]);\n\n  // useEffect to fetch users list on initial render\n  useEffect(() => {\n    fetch(`http://${props.server_ip}:3001/users/admin`).then(response => response.json()).then(data => {\n      setUsers(data);\n    }).catch(error => {\n      console.error('Error fetching users:', error);\n    });\n  }, []);\n  const handleTaskContentChange = (event, userId, taskId) => {\n    const updatedUsers = users.map(user => {\n      if (user._id === userId) {\n        const updatedTasks = user.tasks.map(task => {\n          if (task.id === taskId) {\n            return {\n              ...task,\n              content: event.target.value\n            };\n          }\n          return task;\n        });\n        return {\n          ...user,\n          tasks: updatedTasks\n        };\n      }\n      return user;\n    });\n    setUsers(updatedUsers);\n  };\n  const handleTaskDateChange = (date, userId, taskId) => {\n    const updatedUsers = users.map(user => {\n      if (user._id === userId) {\n        const updatedTasks = user.tasks.map(task => {\n          if (task.id === taskId) {\n            return {\n              ...task,\n              date\n            };\n          }\n          return task;\n        });\n        return {\n          ...user,\n          tasks: updatedTasks\n        };\n      }\n      return user;\n    });\n    setUsers(updatedUsers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"All Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: user.tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: task.content,\n                  onChange: event => handleTaskContentChange(event, user._id, task.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                  selected: task.date,\n                  onChange: date => handleTaskDateChange(date, user._id, task.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 23\n                }, this)]\n              }, task.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, user._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(BodyAdmin, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n_c = BodyAdmin;\nexport default BodyAdmin;\nvar _c;\n$RefreshReg$(_c, \"BodyAdmin\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","jsxDEV","_jsxDEV","BodyAdmin","props","_s","users","setUsers","fetch","server_ip","then","response","json","data","catch","error","console","handleTaskContentChange","event","userId","taskId","updatedUsers","map","user","_id","updatedTasks","tasks","task","id","content","target","value","handleTaskDateChange","date","className","children","fileName","_jsxFileName","lineNumber","columnNumber","username","type","onChange","selected","_c","$RefreshReg$"],"sources":["C:/Users/Noam/task-management/src/components/BodyAdmin.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App_comp.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nfunction BodyAdmin(props) {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  // useEffect to fetch users list on initial render\r\n  useEffect(() => {\r\n    fetch(`http://${props.server_ip}:3001/users/admin`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setUsers(data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching users:', error);\r\n      });\r\n  }, []);\r\n\r\n  const handleTaskContentChange = (event, userId, taskId) => {\r\n    const updatedUsers = users.map(user => {\r\n      if (user._id === userId) {\r\n        const updatedTasks = user.tasks.map(task => {\r\n          if (task.id === taskId) {\r\n            return { ...task, content: event.target.value };\r\n          }\r\n          return task;\r\n        });\r\n        return { ...user, tasks: updatedTasks };\r\n      }\r\n      return user;\r\n    });\r\n    setUsers(updatedUsers);\r\n  };\r\n\r\n  const handleTaskDateChange = (date, userId, taskId) => {\r\n    const updatedUsers = users.map(user => {\r\n      if (user._id === userId) {\r\n        const updatedTasks = user.tasks.map(task => {\r\n          if (task.id === taskId) {\r\n            return { ...task, date };\r\n          }\r\n          return task;\r\n        });\r\n        return { ...user, tasks: updatedTasks };\r\n      }\r\n      return user;\r\n    });\r\n    setUsers(updatedUsers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h3>All Users</h3>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Username</th>\r\n            <th>Tasks</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map(user => (\r\n            <tr key={user._id}>\r\n              <td>{user.username}</td>\r\n              <td>\r\n                <ul>\r\n                  {user.tasks.map(task => (\r\n                    <li key={task.id}>\r\n                      <input\r\n                        type=\"text\"\r\n                        value={task.content}\r\n                        onChange={event => handleTaskContentChange(event, user._id, task.id)}\r\n                      />\r\n                      <DatePicker\r\n                        selected={task.date}\r\n                        onChange={date => handleTaskDateChange(date, user._id, task.id)}\r\n                      />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BodyAdmin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}